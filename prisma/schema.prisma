// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClipFormat {
  h265
  h264
}

enum ClipType {
  recording
  generated
}

enum JobState {
  INITIALIZING
  REQUESTING
  UPLOADING
  PROCESSING
  ERROR
  COMPLETE
  STALLED
}

enum JobType {
  CONCAT
  ANALYZE
  TIMELAPSE
}

enum UploadTaskType {
  clip
  snapshot
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  UNKNOWN
}

enum Role {
  ADMIN
  USER
}

enum CameraType {
  bullet
  dome
  thermal
  standard
  ptz
  ptz_thermal
}

enum HardwareEncoderPriority {
  vaapi
  u30
  nvidia
  none
}

model Gateway {
  // ID of the gateway autogenerated
  id String @id @default(uuid()) @db.Uuid

  // Optional name
  name String? @unique

  // Gateway timezone
  timezone String @default("UTC")

  // something like http://test.ccprxy.com or https://awesome.ccprxy.com
  connectionURL String

  // Token used to authenticate against the gateway's API
  connectionToken String

  // Is gateway currently online
  status ConnectionStatus @default(UNKNOWN)

  // When this gateway last connected
  lastConnection DateTime?

  // Relationships
  cameras   Camera[]
  clips     Clip[]
  snapshots Snapshot[]

  // S3 bucket where clips/snapshots are stored
  s3Bucket   String      @unique
  timelapses Timelapse[]
}

// Very similar to the gateway camera but just at a higher level
model Camera {
  // ID of camera autogenerated
  id String @id @default(uuid()) @db.Uuid

  // Camera can stream
  stream Boolean @default(true)

  // Camera can record
  record Boolean @default(true)

  // Readable camera name
  name String

  clips Clip[]

  ipAddress String?

  snapshots Snapshot[]

  // Camera timezone
  timezone String @default("UTC")

  // Represents the amount of hours transpire before a clip is deleted
  deleteClipAfter Int @default(72)

  // Represents the amount of hours transpire before a snapshot is deleted
  deleteSnapshotAfter Int @default(72)

  // Is camera currently online
  status ConnectionStatus @default(UNKNOWN)

  // When this camera last connected
  lastConnection DateTime?

  // Gateway this  camera belongs to
  gateway   Gateway @relation(fields: [gatewayID], references: [id])
  gatewayID String  @db.Uuid

  synchronized Boolean     @default(false)
  timelapses   Timelapse[]

  manufacturer String @default("Hikvision")

  type CameraType @default(standard)

  // Hardware encoder priority
  hardwareEncoderPriority HardwareEncoderPriority @default(none)

  @@unique([name, gatewayID])
}

model Snapshot {
  // ID of the snapshot which is just the S3 key
  id String @id

  // Snapshot timezone
  timezone String @default("UTC")

  // Snapshot file name on disk
  fileName String

  // Snapshot file size on disk
  fileSize Int

  // Snapshot width
  width Int

  // Snapshot height
  height Int

  // Timestamp of when the snapshot was taken
  timestamp DateTime @default(now())

  // Camera relationship
  camera   Camera? @relation(fields: [cameraID], references: [id], onDelete: Cascade)
  cameraID String? @db.Uuid

  // Gateway relationship
  gateway   Gateway? @relation(fields: [gatewayID], references: [id])
  gatewayID String?  @db.Uuid

  // Has clip been uploaded to S3
  availableCloud Boolean @default(true)

  // Is the clip available on local storage
  availableLocally Boolean @default(true)

  analyticsJobID   String?
  analyzedFileName String?
  analyzed         Boolean        @default(false)
  analyzing        Boolean        @default(false)
  analyzeStart     DateTime?
  analyzeEnd       DateTime?
  primaryTag       String?
  tags             String[]       @default([])
  jobs             SnapshotJobs[]
}

model Clip {
  // ID of the clip which is just the S3 key
  id String @id

  // Clip timezone
  timezone String @default("UTC")

  // Clip file name on S3
  fileName String

  // Clip file size on S3
  fileSize Int

  // Clip width
  width Int

  // Clip height
  height Int

  // Clip duration
  duration Int

  // Clip's file format
  format ClipFormat @default(h265)

  // Clip's type (either a recording or a generated clip)
  type ClipType @default(recording)

  // Represents clip start
  start DateTime @default(now())

  // Represents clip end
  end DateTime?

  // Camera relationship
  camera   Camera? @relation(fields: [cameraID], references: [id], onDelete: Cascade)
  cameraID String? @db.Uuid

  // Gateway relationship
  gateway   Gateway? @relation(fields: [gatewayID], references: [id])
  gatewayID String?  @db.Uuid

  // Has clip been uploaded to S3
  availableCloud Boolean @default(true)

  // Is the clip available on local storage
  availableLocally Boolean @default(true)

  analyticsJobID   String?
  analyzedFileName String?
  analyzed         Boolean   @default(false)
  analyzing        Boolean   @default(false)
  analyzeStart     DateTime?
  analyzeEnd       DateTime?
  primaryTag       String?

  requested   Boolean    @default(false)
  tags        String[]   @default([])
  jobs        ClipJobs[]
  generateJob Job?
}

model ClipJobs {
  id String @id @default(uuid()) @db.Uuid

  job    Job    @relation(fields: [jobID], references: [id], onDelete: Cascade)
  clip   Clip   @relation(fields: [clipID], references: [id], onDelete: Cascade)
  jobID  String @db.Uuid
  clipID String

  @@index([clipID, jobID])
}

model SnapshotJobs {
  id String @id @default(uuid()) @db.Uuid

  job        Job      @relation(fields: [jobID], references: [id], onDelete: Cascade)
  snapshot   Snapshot @relation(fields: [snapshotID], references: [id], onDelete: Cascade)
  jobID      String   @db.Uuid
  snapshotID String

  @@index([snapshotID, jobID])
}

model Job {
  // ID of the bulk job
  id String @id @default(uuid()) @db.Uuid

  // Bulk job resulting file path on S3
  filePath String

  state JobState @default(INITIALIZING)
  type  JobType

  finishedAt DateTime?
  createdAt  DateTime  @default(now())

  clips     ClipJobs[]
  snapshots SnapshotJobs[]

  uploadProgress     Float   @default(0.0)
  generationProgress Float   @default(0.0)
  errorMessage       String?
  itemsUploaded      Int     @default(0)

  serviceID   String?
  lastUpdated DateTime @default(now())
  hash        String

  generatedClip   Clip?   @relation(fields: [generatedClipID], references: [id])
  generatedClipID String? @unique

  @@index([id, hash, serviceID])
  @@index([id, hash])
}

model Timelapse {
  // ID of the timelapse
  id String @id @default(uuid()) @db.Uuid

  // Timelapse file name on S3
  fileName String?

  // Timelapse day count
  days Int @default(0)

  // Represents timelapse start
  start DateTime

  // Represents timelapse end
  end DateTime

  // Camera relationship
  camera   Camera? @relation(fields: [cameraID], references: [id], onDelete: Cascade)
  cameraID String? @db.Uuid

  // Gateway relationship
  gateway   Gateway? @relation(fields: [gatewayID], references: [id])
  gatewayID String?  @db.Uuid

  timelapseJobID String
  generating     Boolean @default(true)

  createdAt DateTime @default(now())
}

model User {
  id                 String   @id @default(uuid()) @db.Uuid
  email              String   @unique
  password           String
  firstName          String?
  lastName           String?
  refreshToken       String?
  passwordResetToken String?
  createdAt          DateTime @default(now())
  lastLogin          DateTime @default(now())
  roles              Role[]   @default([USER])
}
